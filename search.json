[
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Introduction to acronyms",
    "section": "",
    "text": "The goal of acronyms is to provide support for acronyms to Quarto documents, in a similar way to what glossaries achieve for LaTeX.\nBasically, it allows you to define a list of acronyms, and to automatically replace acronyms inside the document. A list of all defined acronyms along with their definitions is also generated and inserted.\nUsing acronyms can be done in 3 simple steps:"
  },
  {
    "objectID": "getting_started.html#installing-the-extension",
    "href": "getting_started.html#installing-the-extension",
    "title": "Introduction to acronyms",
    "section": "Installing the extension",
    "text": "Installing the extension\nThis extension can be installed through the standard Quarto add command:\nquarto add rchaput/acronyms\nThis command will download the latest version and install it locally to your _extensions folder. Please see the official Quarto documentation for details.\nMake sure that your Quarto document(s) contain the following lines in the YAML metadata, to load the acronyms extension:\n---\nfilters:\n  - acronyms\n---"
  },
  {
    "objectID": "getting_started.html#defining-acronyms",
    "href": "getting_started.html#defining-acronyms",
    "title": "Introduction to acronyms",
    "section": "Defining acronyms",
    "text": "Defining acronyms\nPrior to using acronyms in the Quarto document, they must be defined in the YAML metadata.\nAn acronym is defined as:\n\na key, which is used to refer to the acronym throughout the document;\na short name, which is usually the acronym itself;\na long name, which is usually what the acronym stands for.\n\nTo make the list less verbose, if the key is not provided, acronyms uses the short name as a default key for the acronym.\nThe following example defines 2 acronyms:\n---\nacronyms:\n  keys:\n    - shortname: qmd\n      longname: Quarto document\n    - key: yaml\n      shortname: YAML\n      longname: YAML Ain't Markup Language\n---"
  },
  {
    "objectID": "getting_started.html#using-acronyms",
    "href": "getting_started.html#using-acronyms",
    "title": "Introduction to acronyms",
    "section": "Using acronyms",
    "text": "Using acronyms\nFinally, to insert an acronym into the document, simply use \\acr{&lt;KEY&gt;}, where &lt;KEY&gt; is an acronym’s key, as defined in the YAML metadata.\nThis command will be automatically replaced by acronyms. The result depends on the chosen style (see styles for more details). Most styles will also make a difference between the first use, and the next occurrences.\nBy default, acronyms will replace as follows:\n\nfirst use: &lt;long name&gt; (&lt;short name&gt;)\nnext uses: &lt;short name&gt;\n\nThe next lines show an example of how acronyms replaces acronyms in a document, assuming the acronyms qmd and yaml have been defined, as per the previous example.\n\\acrs{qmd} allow to easily write technical content. A \\acr{qmd} uses \\acr{yaml}\nfor the metadata.\n\nQuarto documents (qmds) allow to easily write technical content. A qmd uses YAML Ain’t Markup Language (YAML) for the metadata.\n\nNotice how by using \\acrs we can pluralize the acronym; you can read more about that in Plural form."
  },
  {
    "objectID": "getting_started.html#complete-example",
    "href": "getting_started.html#complete-example",
    "title": "Introduction to acronyms",
    "section": "Complete example",
    "text": "Complete example\nA complete example showing the previous instructions as a single file can be found here."
  },
  {
    "objectID": "getting_started.html#next-steps",
    "href": "getting_started.html#next-steps",
    "title": "Introduction to acronyms",
    "section": "Next steps",
    "text": "Next steps\nThe current vignette gives you the tools for a simple document, using the (sane) defaults provided by acronyms. However, most of the mechanisms are highly configurable and offer various options.\nAvailable options are described in Options, and several tutorials for advanced usages are listed in Advanced usage.\nYou can also read more about the new shortcode syntax.\nStyles lists the different styles that can be used, along with a small example to visualize each of them."
  },
  {
    "objectID": "articles/options.html",
    "href": "articles/options.html",
    "title": "Available options",
    "section": "",
    "text": "acronyms supports various options to change its behaviour. This vignette lists them, what they do, and their allowed values.\nOptions should be set in the YAML metadata, inside the acronyms field."
  },
  {
    "objectID": "articles/options.html#overview",
    "href": "articles/options.html#overview",
    "title": "Available options",
    "section": "Overview",
    "text": "Overview\nThe following example gives an overview of available options, along with their default values.\n---\nlang: en\nacronyms:\n  loa_title: \"List of Acronyms\"\n  loa_header_classes: []\n  loa_format: nil\n  include_unused: true\n  insert_loa: \"beginning\"\n  insert_links: true\n  id_prefix: \"acronyms_\"\n  sorting: \"alphabetical\"\n  non_existing: \"key\"\n  style: \"long-short\"\n  fromfile:\n    - ./acronyms.yml\n---"
  },
  {
    "objectID": "articles/options.html#lang",
    "href": "articles/options.html#lang",
    "title": "Available options",
    "section": "lang",
    "text": "lang\nThis is a standard Quarto option that sets the document language. When specified, acronyms automatically recognizes it, and translates some elements, such as the List of Acronyms’ title. By default, if the translation is not available for your language, it will resort to English. If you are not satisfied with this title, you can always override it manually by using the loa_title option."
  },
  {
    "objectID": "articles/options.html#loa_title",
    "href": "articles/options.html#loa_title",
    "title": "Available options",
    "section": "loa_title",
    "text": "loa_title\nacronyms can generate a List Of Acronyms (LoA) automatically and insert it into your document. This option controls the title (header) that precedes this list. By default, it is set to List of Acronyms.\nYou may override it to change this title.\nAnother available behaviour is to disable the creation of this header, by setting the value to \"\" (the empty string). This is particularly useful if you want to control exactly where and how to insert the List Of Acronyms. In this case, the List Of Acronyms will still be generated and inserted, but without its preceding header.\nExamples:\nTo set the title to “Glossary”:\n---\nacronyms:\n  loa_title: \"Glossary\"\n---\nTo disable the title:\n---\nacronyms:\n  loa_title: \"\"\n---"
  },
  {
    "objectID": "articles/options.html#loa_header_classes",
    "href": "articles/options.html#loa_header_classes",
    "title": "Available options",
    "section": "loa_header_classes",
    "text": "loa_header_classes\nThis options allows to add more classes to the List Of Acronyms (loa) header. By default, the header uses the loa class, which should not do anything by itself. It may be used to customize the LoA with CSS rules, but has no default behaviour.\nAny additional class can be put to the LoA by putting them in this option, in the form of a list. By default, this list is empty, which means that the LoA only has the loa class.\nExamples:\nTo put the LoA in an unnumbered section:\n---\nacronyms:\n  loa_header_classes:\n    - unnumbered\n---"
  },
  {
    "objectID": "articles/options.html#loa_format",
    "href": "articles/options.html#loa_format",
    "title": "Available options",
    "section": "loa_format",
    "text": "loa_format\nThis option controls how to render the List of Acronyms (LoA). By default, it is rendered as a Definition List, which prints the acronym’s shortname on a first line, and the acronym’s definition on a second line, indented.\nWhen rendering a HTML document, the Definition List can be stylized using CSS; but it is not easy on other formats (PDF, DOCX, …). To override this behaviour, the loa_format allows you to specify a Markdown template to render each acronym in the LoA. The template may contain Markdown syntax, such as ** for bold font, * for italic, etc. The template should also contain the {shortname} and {longname} placeholders, which acronyms will replace by each acronym’s short name and long name.\nNote that, because this string can use Markdown syntax, it must be suffixed with the {=raw} qualifier to avoid Markdown being parsed too early.\nExamples:\nTo render acronyms to a bullet list, with the short name in bold font, followed by a colon, then the long name on the same line:\n---\nacronyms:\n  loa_format: '`- **{shortname}**: {longname}`{=raw}'\n---\nIn this example, - **{shortname}**: {longname} is the template itself. The {=raw} part is unfortunately needed to avoid bugs with Pandoc."
  },
  {
    "objectID": "articles/options.html#include_unused",
    "href": "articles/options.html#include_unused",
    "title": "Available options",
    "section": "include_unused",
    "text": "include_unused\nThis option controls whether unused acronyms should be included in the generated List Of Acronyms.\nAn “unused acronym” is an acronym that has been defined in the YAML metadata, but which key does not appear in an \\acr{key} inside the document body.\nThis option accepts only boolean values: either true (the default), or false.\nIt is particularly useful if you want to define all possible acronyms (e.g., the same for all your documents), but you actually use only some of them and do not want to clutter the List Of Acronyms.\nExamples:\nTo remove unused acronyms from the List Of Acronyms:\n---\nacronyms:\n  include_unused: false\n---"
  },
  {
    "objectID": "articles/options.html#insert_loa",
    "href": "articles/options.html#insert_loa",
    "title": "Available options",
    "section": "insert_loa",
    "text": "insert_loa\nBy default, acronyms generates a List Of Acronyms and automatically includes it for you at the beginning of the document, i.e., as the first block.\nDepending on your desired document structure, that behaviour might not be wanted. This option allows you to insert it automatically at the end, or even to not insert it automatically.\nIf you still want to make acronyms automatically generate a List Of Acronyms, but to insert it somewhere else (e.g., after a preface), you can use this option in conjunction with the \\printacronyms command.\nThis command, which must be used inside the document’s body, will be replaced by acronyms with the List Of Acronyms.\nNote: due to the way Pandoc Lua Filters work, \\printacronyms needs to be used exactly as-is, inside its own paragraph, with nothing else in the paragraph. Otherwise, it will not be recognized.\nExamples:\nTo insert it automatically at the beginning: (the default)\n---\nacronyms:\n  insert_loa: \"beginning\"\n---\nTo insert it automatically at the end:\n---\nacronyms:\n  insert_loa: \"end\"\n---\nTo disable the automatic insertion of the List Of Acronyms:\n---\nacronyms:\n  insert_loa: false\n---\nNote: if you disable the automatic insertion, you must either:\n\nInsert the LoA manually somewhere in your document by using \\printacronyms.\n\nSome text for demonstration...\n\n\\printacronyms\n\nAnd some text after. Note that nothing else is in the same\nparagraph as `\\printacronyms`.\n\nDisable the insertion of links using the insert_links option.\n\n---\nacronyms:\n  insert_loa: false\n  insert_links: false\n---\nOtherwise, acronyms will try to link the acronyms with their definition in the List Of Acronyms… which does not exist!"
  },
  {
    "objectID": "articles/options.html#insert_links",
    "href": "articles/options.html#insert_links",
    "title": "Available options",
    "section": "insert_links",
    "text": "insert_links\nAcronyms can be linked to their definition in the List Of Acronyms in order to make navigation easier for your readers.\nThis option controls whether to automatically insert these links: it accepts only boolean values (by default, true).\nExamples: To disable this behaviour (acronyms are inserted as plain texts):\n---\nacronyms:\n  insert_links: false\n---"
  },
  {
    "objectID": "articles/options.html#id_prefix",
    "href": "articles/options.html#id_prefix",
    "title": "Available options",
    "section": "id_prefix",
    "text": "id_prefix\nWhen acronyms are linked to their definition (see insert_links), they use an unique ID to do so. To ensure that IDs stay unique, they are composed of a common prefix and the acronym’s key.\nThis option controls the prefix that is used, by default set to \"acronyms_\".\nThis means that, for example, an acronym which key is YAML will use the following ID: acronyms_YAML.\nAdditionally, the List Of Acronyms’ title (if inserted, refer to the loa_title option for more details) will have its own ID as well, which is composed of the same prefix followed by \"HEADER_LOA\", for example: acronyms_HEADER_LOA.\nIf you find that, for some reason, one of the IDs conflict with another ID in your document, you can use this option to change the prefix.\nNote: Since this option is used to create IDs, it should not contain any special character (emoji, punctuation, …).\nExamples:\nTo set the prefix to “my_acronyms_”:\n---\nacronyms:\n  id_prefix: \"my_acronyms_\"\n---"
  },
  {
    "objectID": "articles/options.html#sorting",
    "href": "articles/options.html#sorting",
    "title": "Available options",
    "section": "sorting",
    "text": "sorting\nThis option controls the sorting criterion that will be used to automatically sort the List Of Acronyms when it is generated, i.e., the order in which the acronyms are displayed in this list.\nSeveral values are available:\n\nalphabetical (default): Acronyms are sorted by their short name, in an alphabetical order. That means that, for example, an acronym “Rmd” is sorted before “YAML” (as R &lt; Y).\nalphabetical-case-insensitive: Similar to alphabetical, but ignoring the letter case (lowercase/uppercase).\ninitial: Acronyms are displayed in the exact same order they defined in your YAML metadata. This is somewhat equivalent to not sorting the list.\nusage: Acronyms are sorted in the order in which they appear (i.e., are first used) in the document body. For example, \\acr{YAML} \\acr{Rmd} means that “YAML” appears before “Rmd”. Warning: when this sorting is used, the include_unused option must be set to false. Otherwise, acronyms will raise an error, since it cannot sort acronyms which are never used.\n\nExamples:\nTo sort by order of appearance in the document:\n---\nacronyms:\n  sorting: usage\n  include_unused: false\n---\nTo sort by order of definition in the YAML metadata:\n---\nacronyms:\n  sorting: initial\n---"
  },
  {
    "objectID": "articles/options.html#non_existing",
    "href": "articles/options.html#non_existing",
    "title": "Available options",
    "section": "non_existing",
    "text": "non_existing\nThis option controls what to dot when acronyms finds an acronym that doesn’t exist, i.e., which key was not defined.\nThe default behaviour is to log a warning and to replace by the used key, so that the document may still be readable.\nFor example, assuming that the “Rmd” key was never defined in the YAML metadata, the line:\n\\acr{Rmd} can be used to write technical documents.\nis rendered as: &gt; Rmd can be used to write technical documents.\nThe following warning is also printed to the standard error (stderr):\n\n[WARNING][acronyms] Acronym key Rmd not recognized\n\nAvailable values are:\n\nkey: The default behaviour, logs a warning and replaces the command by the used key itself.\n??: Logs a warning and replaces the command by “??”. This behaviour is similar to what Biblatex achieves for LaTeX when an unknown citation key is found.\nerror: Stops the parsing by raising an error.\n\nExamples:\nTo visually identify where non-existing acronyms are used:\n---\nacronyms:\n  non_existing: \"??\"\n---\nIn this case, the previous example would be rendered as:\n\n?? can be used to write technical documents.\n\nTo stop the parsing and absolutely avoid using non-existing acronyms:\n---\nacronyms:\n  non_existing: error\n---"
  },
  {
    "objectID": "articles/options.html#on_duplicate",
    "href": "articles/options.html#on_duplicate",
    "title": "Available options",
    "section": "on_duplicate",
    "text": "on_duplicate\nThis option controls what to do when two (or more) acronyms are defined with the same key.\nBy default, acronyms prints a warning to the standard error (stderr), and keeps the old acronym in its database (the new acronym is thus dropped).\nSeveral values are available:\n\nwarn (default)\nreplace: No warning is issued, and the old acronym is replaced by the new one.\nkeep: No warning is issued, and the old acronym is kept.\nerror: Raises a descriptive error, and stops the parsing.\n\nExamples:\nIn the following examples, we consider the following acronyms definitions in the YAML metadata:\n---\nacronyms:\n  keys:\n    - shortname: Rmd\n      longname: 1st definition\n    - shortname: Rmd\n      longname: 2nd definition\n---\nTo always replace duplicates:\n---\nacronyms:\n  on_duplicate: replace\n---\n\\acr{Rmd} would be rendered as 2nd definition (Rmd)\nTo always keep duplicates without warning:\n---\nacronyms:\n  on_duplicate: keep\n---\n\\acr{Rmd} would be rendered as 1st definition (Rmd)\nTo always avoid duplicates by raising an error:\n---\nacronyms:\n  on_duplicate: error\n---"
  },
  {
    "objectID": "articles/options.html#fromfile",
    "href": "articles/options.html#fromfile",
    "title": "Available options",
    "section": "fromfile",
    "text": "fromfile\nBy default, acronyms expect to find acronyms definitions inside the YAML metadata~; however, you can use fromfile to specify external YAML files from which acronyms should be loaded.\nIts usage is described in details in Advanced usage."
  },
  {
    "objectID": "articles/options.html#style",
    "href": "articles/options.html#style",
    "title": "Available options",
    "section": "style",
    "text": "style\nacronyms supports several styles to replace acronyms, similarly to how the LaTeX package glossaries work for abbreviations.\nStyles define how to render an acronym in the document body: which fields to use, in which order, with emphasis or not, with a different style whether this is the acronym’s first use or not, etc.\nThe list of available styles, along with a visualization of each of them, is displayed in styles."
  },
  {
    "objectID": "articles/plural.html",
    "href": "articles/plural.html",
    "title": "Plural form",
    "section": "",
    "text": "acronyms also supports rendering acronyms as plural. By default, it simply appends a final ‘s’ to the short and long form of your acronyms. This means that, for most words, you can start using the plural form without any configuration!\n\nBasic usage\n\nUsing the legacy syntax:\n\nSimply use \\acrs{KEY} instead of \\acr{KEY} to use the plural form.\n\nUsing the newer shortcode syntax:\n\nAdd the plural=true argument when calling a shortcode, such as: {{&lt; acr KEY plural=true &gt;}}.\n\n\nCustomizing the plural form\nFor some acronyms of course, the final ‘s’ is not appropriate. In such cases, you can specify the desired form, for short and/or long form, when defining the acronym, by adding new fields in a plural block:\nacronyms:\n  keys:\n    - shortname: ST\n      longname: stimulus\n      plural:\n        shortname: STs\n        longname: stimuli\nNote that acronyms defaults to adding the final ‘s’ if either plural.shortname or plural.longname are not defined. You can thus specify only what you need to customize!\nBecause the previous example trivially uses STs as the plural shortname, we could have omitted it:\nacronyms:\n  keys:\n    - shortname: ST\n      longname: stimulus\n      plural:\n        longname: stimuli\nSimilarly, you can only specify only the plural.shortname and not the plural.longname.\nFor more examples, you can refer to test case #33"
  },
  {
    "objectID": "advanced/external_file.html",
    "href": "advanced/external_file.html",
    "title": "Defining acronyms in external file(s)",
    "section": "",
    "text": "Whereas defining acronyms directly in the YAML metadata is the most straightforward way, acronyms also support reading definitions from one (or several) pseudo-YAML file."
  },
  {
    "objectID": "advanced/external_file.html#referring-to-an-external-definition-file-in-a-quarto-document",
    "href": "advanced/external_file.html#referring-to-an-external-definition-file-in-a-quarto-document",
    "title": "Defining acronyms in external file(s)",
    "section": "Referring to an external definition file in a Quarto document",
    "text": "Referring to an external definition file in a Quarto document\nTo do so, simply specify the file path in the fromfile attribute of the YAML metadata. This behaviour is particularly useful if you want to define acronyms in the same file for multiple projects, or generate it automatically, in a similar way to the .bib files for LaTeX citations.\nThis attribute may be either a single path, for example:\n---\nacronyms:\n  fromfile: ./acronyms.yml\n---\nor a list of paths, for example:\n---\nacronyms:\n  fromfile:\n    - ./acronyms1.yml\n    - ./acronyms2.yml\n---\nNote that the path may be either absolute or relative. If the path is relative, it is resolved with respect to the current working directory of Pandoc. By default, when using Quarto, this working directory is set to the directory containing the source qmd file.\nIn our examples, we thus assume that the acronyms.yml (respectively, acronyms1.yml and acronyms2.yml) live in the same folder as the qmd document."
  },
  {
    "objectID": "advanced/external_file.html#content-of-the-definition-files",
    "href": "advanced/external_file.html#content-of-the-definition-files",
    "title": "Defining acronyms in external file(s)",
    "section": "Content of the definition file(s)",
    "text": "Content of the definition file(s)\nThese files support 2 different formats.\n\nThe “original”, metadata-like format:\n\n---\nacronyms:\n  keys:\n  # Define your keys here\n    - shortname: qmd\n      longname: Quarto document\n---\nThis format is exactly as you would write in the “main” Quarto document, except that only the acronyms.keys field is used. Any other field or content will be ignored.\n\nThe “simplified” format, key-value like:\n\n---\n# Define your acronyms directly here as shortname: longname\nqmd: Quarto document\n---\nThis format is much shorter and easier to read; however, you cannot define the acronyms’ keys, and cannot use spaces in the shortname (but you should avoid doing so anyway).\nPlease note that these formats are not really YAML; instead, the files are read as Quarto documents themselves, hence the presence of the --- fences.\nHowever, only the acronyms’ definitions are used in fromfile external documents. No other option is taken into account. The eventual document body is ignored as well."
  },
  {
    "objectID": "advanced/external_file.html#loading-order-for-acronyms",
    "href": "advanced/external_file.html#loading-order-for-acronyms",
    "title": "Defining acronyms in external file(s)",
    "section": "Loading order for acronyms",
    "text": "Loading order for acronyms\nThe acronyms are read in the following order:\n\nAcronyms in the acronyms.key field of the source qmd document, in sequential order.\nAcronyms in each of the acronyms.fromfile files.\n\nFiles are read in sequential order.\nAcronyms inside each file are also read in sequential order.\n\n\nThis order is meaningful in 2 cases:\n\nWhen a duplicate key is found, the behaviour (keep or replace) depends on the order in which acronyms are read.\nWhen the initial sorting is used, the List Of Acronyms displays acronyms in the same order as they were defined."
  },
  {
    "objectID": "advanced/index.html",
    "href": "advanced/index.html",
    "title": "Advanced usage tutorials",
    "section": "",
    "text": "Extending the acronyms features\n\n\nLearn how to extend existing features, such as styles and translations.\n\n\n\n\n\n\n\n\n\n\nUsing acronyms in a multi-document project\n\n\nLearn how to use acronyms in several documents, for example a website or book; how to control where the List of Acronyms appear, which acronyms appear on which pages, etc.\n\n\n\n\n\n\n\n\n\n\nCustomizing the List of Acronyms title\n\n\nRead how to customize the List of Acronyms title (header), including putting it in an unnumbered section.\n\n\n\n\n\n\n\n\n\n\nDefining acronyms in external file(s)\n\n\nLearn how to define acronyms in one or several external files, which can be reused throughout documents or projects (rather than directly in the YAML metadata).\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "advanced/extending.html",
    "href": "advanced/extending.html",
    "title": "Extending the acronyms features",
    "section": "",
    "text": "acronyms offers several features, but you may want to customize it in your very own way, for example to add a new acronym style, or a translation. This article explains how to do so; to help the acronyms community, you can contribute your new style and translation by creating a pull request."
  },
  {
    "objectID": "advanced/extending.html#adding-a-new-style",
    "href": "advanced/extending.html#adding-a-new-style",
    "title": "Extending the acronyms features",
    "section": "Adding a new style",
    "text": "Adding a new style\nWhen you use an acronym in your document, acronyms uses a style to actually render it, based on its short name, long name, and whether the acronym appears for the first time. A list of existing styles can be found here, but we cannot cover all possible styles.\nFortunately, you can easily add a new style. It requires writing some Lua code, yet it should be simple enough that it can be done without any knowledge of Lua, especially by taking inspiration from existing styles.\nFor example, the long-short style returns Long name (Short name) in the case of a first use, and Short name the next uses. It is implemented as:\nstyles[\"long-short\"] = function(acronym, insert_links, is_first_use)\n    local text\n    if is_first_use then\n        text = acronym.longname .. \" (\" .. acronym.shortname .. \")\"\n    else\n        text = acronym.shortname\n    end\n\n    return create_element(text, acronym.key, insert_links)\nend\nNote that a style is created by writing:\nstyles[\"YOUR STYLE NAME HERE\"] = function(acronym, insert_links, is_first_use)\n    local text\n    SOME CODE HERE\n    return create_element(text, acronym.key, insert_links)\nend\nwhere YOUR STYLE NAME HERE is the name of the style you desire (it should be all lowercase, with whitespaces replaced by hyphens), and SOME CODE HERE defines what will be the text of the acronym (by setting a value to the text variable).\nIn most cases, you will want to distinguish between first use / next use, by using a if first_use then (...) else (...) end structure, as in the previous example. You may omit this structure if you want the same appearance each time the acronym appears.\nSimple styles will only rely on some combination of acronym.shortname and acronym.longname, optionally with some hardcoded elements such as parens (combined with .., as in \"(\" .. acronym.shortname .. \")\"). For more complex styles, e.g., to put some text in bold font, you will need to use Pandoc elements.\nFor example, here is the code to create a new style named bold-short that returns the long name in the first use, and the short name in bold in next uses:\nstyles[\"bold-short\"] = function(acronym, insert_links, is_first_use)\n    local text\n    if is_first_use then\n        text = acronym.longname\n    else\n        text = pandoc.Strong(acronym.shortname)\n    end\n    return create_element(text, acronym.key, insert_links)\nend\nNote the pandoc.Strong element that will be displayed in a bold font. This style, when added to the _extensions/acronyms/acronyms_styles.lua file, will be invoked by setting the style: bold-short option in the metadata of your document."
  },
  {
    "objectID": "advanced/extending.html#adding-a-new-translation",
    "href": "advanced/extending.html#adding-a-new-translation",
    "title": "Extending the acronyms features",
    "section": "Adding a new translation",
    "text": "Adding a new translation\nFor some elements, such as the List of Acronyms’ title, acronyms is able to automatically translate them to your desired language, assuming that the lang option is set in the metadata of your document. However, not many languages are currently available; to add your own language, you may modify the _extension/acronyms/acronyms_translations.lua file.\nTranslations are added in the following way:\n    loa_title = {\n        [\"\"] = \"List Of Acronyms\", -- Default value\n        [\"en\"] = \"List Of Acronyms\",\n        [\"fr\"] = \"Liste des Acronymes\",\n    }\nNote that each line represents a translation, using the format [\"TRANSLATION LANGUAGE HERE\"] = \"TRANSLATION HERE\". To add a new translation, simply add a new line (or duplicate an existing one), and set the language tag, usually a two-letter code, such as en, fr, es, zh, … and the corresponding translation after the = symbol.\nNote that the language tag might be more complex if necessary, for exemple to specialize a translation for a given idiom or region. en-GB and en-US are two valid tags that refer (respectively) to the Great-Britain and United States regions of the English language.\nacronyms identifies the best language, based on available translations and the user’s requested language. For example, if the user requests en-GB, but only en or fr are available, it will resort to en. If the user requests to zh, it will resort to \"\" (which should be equal to the en one). However, if an user request en (or en-US) but only en-GB or fr are available, it will not match (en-GB is “too” specialized to match en). For this reason, it is recommended that you set the language to the most simple tag, such as en, es, etc."
  },
  {
    "objectID": "advanced/multi_document.html",
    "href": "advanced/multi_document.html",
    "title": "Using acronyms in a multi-document project",
    "section": "",
    "text": "Because Quarto renders each document separately, the acronyms extension does not know that your project is a multi-document one. This means that, by default, the rendering might not correspond to what you expect for a book or a website.\nThis vignette describes how to configure acronyms for several use-cases, such as using a single List of Acronyms, or one for each chapter, etc.\nNote: Future versions of Quarto might offer new mechanisms that acronyms will be able to leverage, bringing new features to multi-document projects. Until then, some functionalities might not work, or require additional (manual) setup."
  },
  {
    "objectID": "advanced/multi_document.html#using-a-single-list-of-acronyms",
    "href": "advanced/multi_document.html#using-a-single-list-of-acronyms",
    "title": "Using acronyms in a multi-document project",
    "section": "Using a single List of Acronyms",
    "text": "Using a single List of Acronyms\nThe “classic” setup for a book or website is to have a single List of Acronyms (LoA), and have various acronyms usages throughout the documents.\nTo achieve this, the LoA must be configured on the desired page (for example, the index page), and acronyms must be configured on each page. The following code blocks show the required configuration, for each of the project files:\n\n_quarto.yml: defining the section order (to illustrate), and loading the acronyms filter (to avoid having to add it on each page).\n\nproject:\n  type: book\nbook:\n  title: \"Test book\"\n  chapters:\n    - index.qmd\n    - chap1.qmd\n    - chap2.qmd\nfilters:\n  - acronyms\nacronyms:\n  fromfile: acronyms.yml\nThe acronyms filter may also be loaded individually on desired pages, if it should not be enabled for some of them.\n\nacronyms.yml: defining the various acronyms in an external file, to simplify re-usability.\n\n---\nacronyms:\n  keys:\n    - shortname: acr1\n      longname: first acronym\n    - shortname: acr2\n      longname: second acronym\n---\nSee Defining acronyms in external file(s) for a detailed explanation; this file is not required (acronyms could be defined in each document), but greatly simplifies the setup and avoids potential errors.\n\nindex.qmd: defining the LoA in the first page; it must be set to include all acronyms, even those unused, since the acronyms usages will appear on other pages.\n\n---\nacronyms:\n  include_unused: true\n  insert_loa: false\n  insert_links: false\n---\n\n\\printacronyms\n\nHome page; place here any title, or introduction...\nThe \\printacronyms paragraph must be placed where you want the List of Acronyms to be shown; in this example, we put it at the beginning of the index page, but it could be elsewhere (after an introduction, in the last page, …).\nMissing feature: the insert_links option must be set to false, because acronyms will not be able to create links between different documents. This could change in future versions of Quarto.\n\nchap1.qmd: the first chapter; you may name this file as you want, we simply reuse the name defined in _quarto.yml. In this file, we must setup acronyms to not create a LoA.\n\n---\nacronyms:\n  insert_loa: false\n  insert_links: false\n---\n\n# 1st chapter\n\nThis paragraph mentions \\acr{acr1} for the first time.\n\nAnd now, in this paragraph, \\acr{acr1} is in short form.\nNote that, as mentioned previously, links are unfortunately disabled. If the option insert_links is set to true on this page, the acronyms will be provided with a link, but the link itself will not work, because the LoA will not be found on the same page.\n\nchap2.qmd: the second chapter, just like the previous file. Again, the name can be different.\n\n---\nacronyms:\n  insert_loa: false\n  insert_links: false\n---\n\n# 2nd chapter\n\nThis paragraph mentions \\acr{acr2} for the first time.\n\nAnd now, in this paragraph, \\acr{acr2} is in short form.\n\nHowever, \\acr{acr1} should be again in long form.\nMissing feature: because a completely new instance of acronyms is launched by Quarto for each separate page, it “forgets” which acronyms have already been used. As described in this 2nd file, acronym acr1 will be printed in the long form again, even though it was already shown in the previous chapter."
  },
  {
    "objectID": "advanced/multi_document.html#using-separate-list-of-acronyms-in-each-page",
    "href": "advanced/multi_document.html#using-separate-list-of-acronyms-in-each-page",
    "title": "Using acronyms in a multi-document project",
    "section": "Using separate List of Acronyms in each page",
    "text": "Using separate List of Acronyms in each page\nWhen creating a separate List of Acronyms (LoA) in each page, it should be configured to be printed at an appropriate location, and with an appropriate header.\nBy default, the LoA would appear as the first element, which would make it the chapter title in a website. Instead, we want the chapter title to be the first element; ideally, the LoA should also be a 2nd level heading (a section rather than a chapter). In this example, we will also make it an unnumbered header.\n\n_quarto.yml: just like the previous example, we simply load configure the book, and load the acronyms filter.\n\nproject:\n  type: book\nbook:\n  title: \"Test book\"\n  chapters:\n    - index.qmd\n    - chap1.qmd\n    - chap2.qmd\nfilters:\n  - acronyms\nacronyms:\n  fromfile: acronyms.yml\n\nacronyms.yml: defining the various acronyms in an external file, to simplify re-usability.\n\n---\nacronyms:\n  keys:\n    - shortname: acr1\n      longname: first acronym\n    - shortname: acr2\n      longname: second acronym\n---\n\nindex.qmd: if no acronyms are used on this page, we must disable the LoA creation.\n\n---\nacronyms:\n  insert_loa: false\n---\n\nHome page; place here any title, or introduction...\n\nchap1.qmd: the first chapter; you may name this file as you want. In this file, we put the LoA at the beginning of the document, just below the chapter title. The LoA title must be set to \"\" so that we can configure it manually.\n\n---\nacronyms:\n  insert_loa: false\n  loa_title: \"\"\n---\n\n# 1st chapter\n\n## List of Acronyms {.unnumbered}\n\n\\printacronyms\n\nThis paragraph mentions \\acr{acr1} for the first time.\n\nAnd now, in this paragraph, \\acr{acr1} is in short form.\n\nchap2.qmd: the second chapter, just like the previous file. Again, the name can be different. In this file, we put the LoA at the end.\n\n---\nacronyms:\n  insert_loa: false\n  loa_title: \"\"\n---\n\n# 2nd chapter\n\nThis paragraph mentions \\acr{acr2} for the first time.\n\nAnd now, in this paragraph, \\acr{acr2} is in short form.\n\nHowever, \\acr{acr1} should be again in long form.\n\n## List of Acronyms {.unnumbered}\n\n\\printacronyms"
  },
  {
    "objectID": "advanced/customized_loa_header.html",
    "href": "advanced/customized_loa_header.html",
    "title": "Customizing the List of Acronyms title",
    "section": "",
    "text": "By default, the List Of Acronyms (loa) is generated with its own header; depending on your document configuration, this header may be numbered.\nTo obtain an unnumbered section, you may add the extra class unnumbered (as per the standard Pandoc and Quarto way to create an unnumbered section) by using the loa_header_classes metadata option.\nFor example:\n---\nformat:\n  pdf:\n    number-sections: true\nacronyms:\n  loa_header_classes:\n    - unnumbered\n  keys:\n    - shortname: qmd\n      longname: Quarto document\n---\n\n# Introduction\n\nUsing an acronym: \\acr{qmd}\nThis will generate a PDF with sections List of Acronyms (unnumbered), and 1. Introduction (numbered). Note that the List of Acronyms is, by default, generated at the beginning of the document, but you may customize it to put at the end, or even at your desired location, by using the options."
  },
  {
    "objectID": "advanced/customized_loa_header.html#using-an-unnumbered-section",
    "href": "advanced/customized_loa_header.html#using-an-unnumbered-section",
    "title": "Customizing the List of Acronyms title",
    "section": "",
    "text": "By default, the List Of Acronyms (loa) is generated with its own header; depending on your document configuration, this header may be numbered.\nTo obtain an unnumbered section, you may add the extra class unnumbered (as per the standard Pandoc and Quarto way to create an unnumbered section) by using the loa_header_classes metadata option.\nFor example:\n---\nformat:\n  pdf:\n    number-sections: true\nacronyms:\n  loa_header_classes:\n    - unnumbered\n  keys:\n    - shortname: qmd\n      longname: Quarto document\n---\n\n# Introduction\n\nUsing an acronym: \\acr{qmd}\nThis will generate a PDF with sections List of Acronyms (unnumbered), and 1. Introduction (numbered). Note that the List of Acronyms is, by default, generated at the beginning of the document, but you may customize it to put at the end, or even at your desired location, by using the options."
  },
  {
    "objectID": "advanced/customized_loa_header.html#manually-customizing-the-title",
    "href": "advanced/customized_loa_header.html#manually-customizing-the-title",
    "title": "Customizing the List of Acronyms title",
    "section": "Manually customizing the title",
    "text": "Manually customizing the title\nYou may also want to fully customize the header of the List of Acronyms; this can be done by disabling the automatic generation, and then writing your own header, for which you can leverage all Pandoc and Quarto features.\nTo do so, simply set the insert_loa option to false to disable the automatic generation of the List of Acronyms, and set loa_title to '' (the empty string) to disable the generation of the header. You may then write exactly what you want as a header, and use \\printacronyms to generate the List of Acronyms after your header.\nFor example, to use a level-2 header (subsection):\n---\nacronyms:\n  insert_loa: false\n  loa_title: ''\n  keys:\n    - shortname: qmd\n      longname: Quarto document\n---\n\n# Introduction\n\nUsing an acronym: \\acr{qmd}\n\n## List of Acronyms in a subsection\n\n\\printacronyms\n\n# Another section\n\nAt the end of the document"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Acronyms: List of Acronyms support for Quarto documents",
    "section": "",
    "text": "Author: rchaput rchaput.pro@gmail.com\n\n    \n\n\nThis Quarto extension adds the ability to automatically handle acronyms inside Quarto (qmd) documents.\nThroughout the document, acronyms are replaced by either their short name, or their long name, depending on whether they appear for the first time. They also may be linked to their corresponding definition in an automatically generated List of Acronyms, so that readers can access the definition in one click.\nIt is based on the previous Acronymsdown package, which provided the same features, but for RMarkdown documents.\n\n\n\nExample of acronyms document\n\n\n🔥 Now with the Quarto shortcode syntax!\n\n\n\n\nTired of manually having to check whether the first occurrence of an acronym is correctly explained to your readers? acronyms automatically replaces acronyms, based on whether they appear for the first time.\nGenerate a List of Acronyms based on your defined acronyms.\n\nThe place where this list will be generated can be specified (by default, at the beginning of the document).\n\nAutomatic sorting of this list.\n\nYou can choose between the alphabetical, usage or initial order.\n\nEasily manage acronyms\n\nChoose between multiple styles to replace acronyms.\nBy default, 1st occurrence is replaced by long name (short name), and following occurrences are simply replaced by short name.\nAll occurrences can also be linked to the acronym’s definition in the List of Acronyms.\n\nDefine acronyms directly in your document or in external files.\nExtensive configuration\n\nMost of this package’s mechanisms can be configured: how to handle duplicate keys, whether to raise an error, print a warning or ignore an non-existing key, how to sort, …\nSane defaults are included, such that this package can be used out-of-the-box.\n\n🎉 NEW 🎉 Support for plural form\n\n\n\n\nIn a terminal, in the same directory as your Quarto document (or project), enter the following command:\nquarto add rchaput/acronyms@master\nThis will automatically install the latest version from GitHub into your _extensions/ folder. (You may also specify a version tag instead of master; see the list of releases). Then, in your Quarto document (or project configuration), add the following lines to your YAML metadata:\n---\nfilters:\n  - acronyms\n---\nIf you already have a filters: block, simply add the - acronyms line at the end of the list.\n\n\n\nUsing this package requires 2 simple steps:\n\nDefine your acronyms in the YAML metadata.\n\n---\nacronyms:\n  keys:\n    - shortname: qmd\n      longname: Quarto documents\n    - shortname: YAML\n      longname: YAML Ain't Markup Language\n---\n\nUse your acronyms in your qmd document. You may use the older syntax with the \\acr{KEY} special command:\n\n\\acr{qmd} can be used to write technical content. \\acr{qmd} use \\acr{YAML}.\nor the newer shortcode syntax {{&lt; acr KEY &gt;}}:\n{{&lt; acr qmd &gt;}} can be used to write technical content. {{&lt; acr qmd &gt;}} use {{&lt; acr YAML &gt;}}.\nBoth syntaxes render as (using default options):\n\nQuarto documents can be used to write technical content. qmd use YAML Ain’t Markup Language.\n\n\n\n\nThis package was inspired from:\n\nan issue on bookdown ;\na lua filter to sort a definition list ;\nthe pagedown’s insertion of a List of Figures/Tables ;\nthe pandoc-abbreviations filter ;\nthe LaTeX glossaries package."
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Acronyms: List of Acronyms support for Quarto documents",
    "section": "",
    "text": "This Quarto extension adds the ability to automatically handle acronyms inside Quarto (qmd) documents.\nThroughout the document, acronyms are replaced by either their short name, or their long name, depending on whether they appear for the first time. They also may be linked to their corresponding definition in an automatically generated List of Acronyms, so that readers can access the definition in one click.\nIt is based on the previous Acronymsdown package, which provided the same features, but for RMarkdown documents.\n\n\n\nExample of acronyms document\n\n\n🔥 Now with the Quarto shortcode syntax!"
  },
  {
    "objectID": "index.html#features",
    "href": "index.html#features",
    "title": "Acronyms: List of Acronyms support for Quarto documents",
    "section": "",
    "text": "Tired of manually having to check whether the first occurrence of an acronym is correctly explained to your readers? acronyms automatically replaces acronyms, based on whether they appear for the first time.\nGenerate a List of Acronyms based on your defined acronyms.\n\nThe place where this list will be generated can be specified (by default, at the beginning of the document).\n\nAutomatic sorting of this list.\n\nYou can choose between the alphabetical, usage or initial order.\n\nEasily manage acronyms\n\nChoose between multiple styles to replace acronyms.\nBy default, 1st occurrence is replaced by long name (short name), and following occurrences are simply replaced by short name.\nAll occurrences can also be linked to the acronym’s definition in the List of Acronyms.\n\nDefine acronyms directly in your document or in external files.\nExtensive configuration\n\nMost of this package’s mechanisms can be configured: how to handle duplicate keys, whether to raise an error, print a warning or ignore an non-existing key, how to sort, …\nSane defaults are included, such that this package can be used out-of-the-box.\n\n🎉 NEW 🎉 Support for plural form"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Acronyms: List of Acronyms support for Quarto documents",
    "section": "",
    "text": "In a terminal, in the same directory as your Quarto document (or project), enter the following command:\nquarto add rchaput/acronyms@master\nThis will automatically install the latest version from GitHub into your _extensions/ folder. (You may also specify a version tag instead of master; see the list of releases). Then, in your Quarto document (or project configuration), add the following lines to your YAML metadata:\n---\nfilters:\n  - acronyms\n---\nIf you already have a filters: block, simply add the - acronyms line at the end of the list."
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Acronyms: List of Acronyms support for Quarto documents",
    "section": "",
    "text": "Using this package requires 2 simple steps:\n\nDefine your acronyms in the YAML metadata.\n\n---\nacronyms:\n  keys:\n    - shortname: qmd\n      longname: Quarto documents\n    - shortname: YAML\n      longname: YAML Ain't Markup Language\n---\n\nUse your acronyms in your qmd document. You may use the older syntax with the \\acr{KEY} special command:\n\n\\acr{qmd} can be used to write technical content. \\acr{qmd} use \\acr{YAML}.\nor the newer shortcode syntax {{&lt; acr KEY &gt;}}:\n{{&lt; acr qmd &gt;}} can be used to write technical content. {{&lt; acr qmd &gt;}} use {{&lt; acr YAML &gt;}}.\nBoth syntaxes render as (using default options):\n\nQuarto documents can be used to write technical content. qmd use YAML Ain’t Markup Language."
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "Acronyms: List of Acronyms support for Quarto documents",
    "section": "",
    "text": "This package was inspired from:\n\nan issue on bookdown ;\na lua filter to sort a definition list ;\nthe pagedown’s insertion of a List of Figures/Tables ;\nthe pandoc-abbreviations filter ;\nthe LaTeX glossaries package."
  },
  {
    "objectID": "articles/styles.html",
    "href": "articles/styles.html",
    "title": "Styles",
    "section": "",
    "text": "To replace acronyms in your document, acronyms offers several styles, which are quite similar to the abbreviations styles in the LaTeX package glossaries.\nThis vignette lists the available styles, and shows how they render.\nStyles might make a difference between the first use and next uses of an acronym. In the following list, the two variations are shown for each style.\nFor each of the style examples, we will use the following document (metadata and body):"
  },
  {
    "objectID": "articles/styles.html#long-short",
    "href": "articles/styles.html#long-short",
    "title": "Styles",
    "section": "long-short",
    "text": "long-short\nFirst use: Quarto document (qmd)\nNext uses: qmd"
  },
  {
    "objectID": "articles/styles.html#short-long",
    "href": "articles/styles.html#short-long",
    "title": "Styles",
    "section": "short-long",
    "text": "short-long\nFirst use: qmd (Quarto document)\nNext uses: qmd"
  },
  {
    "objectID": "articles/styles.html#long-long",
    "href": "articles/styles.html#long-long",
    "title": "Styles",
    "section": "long-long",
    "text": "long-long\nFirst use: Quarto document\nNext uses: Quarto document"
  },
  {
    "objectID": "articles/styles.html#short-footnote",
    "href": "articles/styles.html#short-footnote",
    "title": "Styles",
    "section": "short-footnote",
    "text": "short-footnote\nFirst use: qmd1\nNext uses: qmd"
  },
  {
    "objectID": "articles/styles.html#footnotes",
    "href": "articles/styles.html#footnotes",
    "title": "Styles",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nqmd: Quarto document↩︎"
  },
  {
    "objectID": "articles/shortcodes.html",
    "href": "articles/shortcodes.html",
    "title": "Shortcodes",
    "section": "",
    "text": "From version 2.0.0, acronyms now uses the Quarto shortcode syntax (in addition to its legacy filter syntax).\nShortcodes are clearer to use, and may have additional keyworded-arguments that can be used to override the behaviour described in the Options (which are the same for all acronyms in a given document). For example, a specific acronym may use a different style than the others.\nThis article describes this new syntax, how to use the shortcodes, the arguments that can be used, and gives a few example."
  },
  {
    "objectID": "articles/shortcodes.html#the-acronym-shortcode",
    "href": "articles/shortcodes.html#the-acronym-shortcode",
    "title": "Shortcodes",
    "section": "The acronym shortcode",
    "text": "The acronym shortcode\nThe {{&lt; acronym KEY &gt;}} shortcode replaces an acronym in the document, where KEY identifies the acronym we want to replace (exactly as \\acr{KEY} does in the legacy syntax).\nFor convenience, the shorter {{&lt; acr KEY &gt;}} can be used instead; both will invoke the same function, and thus have the same arguments and behaviour.\nThe key is mandatory, and acronyms will raise an error if not provided. In addition, the following arguments can be provided:\n\nstyle\nThis argument controls the acronym’s style, that is, how it will be replaced. It must be used similarly to the style options. Only the current acronym will use this specific style, so it is not recommended to provide this argument to set the same style for each acronym; prefer using the metadata option in this case to simplify your workload.\nThe list of possible values can be found in the Styles article.\nFor example:\n---\nacronyms:\n  # Acronyms will use the long-short style by default.\n  style: long-short\n  keys:\n    - shortname: Qmd\n      longname: Quarto documents\n---\n\nFirst use (using default options): {{&lt; acr Qmd &gt;}}\n\nNow we force the long-long style {{&lt; acr Qmd style=long-long &gt;}}\n\nAnd now we reuse the default style: {{&lt; acr Qmd &gt;}}\n\n\nfirst_use\nIn acronyms, most style will replace the acronym differently, based on whether they appear for the first time. For example, a first use may show the acronym longname, but only the shortname on subsequent uses. The first_use argument can be used to force the “first use” or “subsequent use” appearance.\nFor example:\n---\nacronyms:\n  keys:\n    - shortname: Qmd\n      longname: Quarto documents\n---\n\nForced next use: {{&lt; acr Qmd first_use=false &gt;}}\n\n\ninsert_links\nThis argument controls whether the acronym will be rendered with a link to its definition in the List Of Acronyms. This is similar to the insert_links option. As for the style argument, this only changes the current acronym behaviour; to change all acronyms, prefer using the option directly.\nFor example:\n---\nacronyms:\n  keys:\n    - shortname: Qmd\n      longname: Quarto documents\n---\n\n{{&lt; acr Qmd insert_links=false &gt;}}\n\n\nnon_existing\nThis argument controls the behaviour when an acronym is not found. acronyms may print a warning and render it as a special token, such as ?? (like the BibTeX default behaviour), or raise an error, depending on the configuration. Like previous arguments, this one is similar to the non_existing option, but changes only the current acronym. Note that it has no impact when the acronym is found.\nFor example:\n---\nacronyms:\n  keys:\n    - shortname: Qmd\n      longname: Quarto documents\n---\n\nNote that the following acronym is mis-typed: {{&lt; acr qmd non_existing=error &gt;}}"
  },
  {
    "objectID": "articles/shortcodes.html#the-print-acronyms-shortcode",
    "href": "articles/shortcodes.html#the-print-acronyms-shortcode",
    "title": "Shortcodes",
    "section": "The print-acronyms shortcode",
    "text": "The print-acronyms shortcode\nThe List Of Acronyms shortcode can be used to generate the List Of Acronyms (LoA), which lists the acronyms’ definitions (exactly as \\printacronyms does in the legacy syntax).\nIt is recommended to disable the automatic generation of the LoA when using this shortcode, to avoid duplicating the LoA in the resulting document. It is useful when you want to generate the LoA at some exact place.\nFor example:\n---\nacronyms:\n  insert_loa: false\n  keys:\n    - shortname: Qmd\n      longname: Quarto document\n---\n\n# Introduction\n\nLorem ipsum dolor sit amet\n\n{{&lt; print-acronyms &gt;}}\nThe LoA can be customized by using the following keyworded arguments:\n\nsorting\nThis argument controls how the acronyms are sorted when printed in the LoA. It works similarly to the sorting option. See this option for a list of possible behaviours and accepted values.\nFor example:\n---\nacronyms:\n  insert_loa: false\n  keys:\n    - shortname: Qmd\n      longname: Quarto documents\n    - shortname: YAML\n      longname: Yaml Ain't Markup Language\n---\n\n{{&lt; acr Qmd &gt;}} {{&lt; acr YAML &gt;}}\n\n{{&lt; print-acronyms sorting=alphabetical &gt;}}\n\n\ninclude_unused\nThis argument controls whether to include the unused acronyms in the generated LoA. It works just as the include_unused option. In the previous example, we had to insert both acronyms in the document to make them appear in the LoA; this can be prevented by using this argument.\nFor example:\n---\nacronyms:\n  insert_loa: false\n  keys:\n    - shortname: Qmd\n      longname: Quarto documents\n    - shortname: YAML\n      longname: Yaml Ain't Markup Language\n---\n\n{{&lt; print-acronyms include_unused=true &gt;}}\n\n\ntitle\nThis argument controls the title of the generated LoA, similarly to the loa_title option. When using a shortcode, you will most likely want to disable this title, and specify the header exactly as you want directly in the document.\nFor example:\n---\nacronyms:\n  insert_loa: false\n  keys:\n    - shortname: Qmd\n      longname: Quarto documents\n---\n\n# My custom title\n\n{{&lt; print-acronyms title=\"\" &gt;}}\n\n\nheader_classes\nThis argument controls the additional classes that are set to the LoA title, similarly to the loa_header_classes options. Note that it has no impact when the LoA title is not generated.\nFor example:\n---\nacronyms:\n  insert_loa: false\n  keys:\n    - shortname: Qmd\n      longname: Quarto documents\n---\n\n{{&lt; print-acronyms header_classes=.unnumbered &gt;}}"
  }
]